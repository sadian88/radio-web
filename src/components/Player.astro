---
const { currentProgram } = Astro.props;

const formatSchedule = (programa) => {
  if (!programa.hora || !programa.dia) return '';
  return `${programa.dia} - ${programa.hora} a ${programa.hasta}`;
};
---

<div class="player">
  <div class="player-content">
    <div class="now-playing">
      <div class="program-info">
        <h3>{currentProgram.titulo}</h3>
        {currentProgram.hora && (
          <p class="time">{currentProgram.hora} - {currentProgram.hasta}</p>
        )}
      </div>
    </div>
    
    <div class="controls">
      <button class="play-button">
        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="currentColor" class="play-icon">
          <polygon points="5 3 19 12 5 21 5 3"></polygon>
        </svg>
        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="currentColor" class="pause-icon" style="display: none;">
          <rect x="6" y="4" width="4" height="16"></rect>
          <rect x="14" y="4" width="4" height="16"></rect>
        </svg>
      </button>
    </div>

    <slot name="volume-control" />
  </div>
</div>

<script>
  import audioStore from '../stores/audioStore.js';

  const playButton = document.querySelector('.player .play-button');
  const playIcon = playButton?.querySelector('.play-icon');
  const pauseIcon = playButton?.querySelector('.pause-icon');

  // Actualizar la UI cuando cambie el estado
  audioStore.subscribe(({ isPlaying }) => {
    if (playIcon && pauseIcon) {
      playIcon.style.display = isPlaying ? 'none' : 'block';
      pauseIcon.style.display = isPlaying ? 'block' : 'none';
      if (playButton) {
        playButton.classList.toggle('playing', isPlaying);
      }
    }
  });

  // Event listener para el botón de reproducción
  playButton?.addEventListener('click', () => {
    audioStore.togglePlay();
  });
</script>

<style>
  .player {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    background: rgba(0, 0, 0, 0.95);
    backdrop-filter: blur(10px);
    padding: 1rem;
    color: white;
    z-index: 100;
  }

  .player-content {
    max-width: 1200px;
    margin: 0 auto;
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 2rem;
  }

  .now-playing {
    flex: 1;
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .program-info h3 {
    font-size: 1.2rem;
    margin: 0;
  }

  .time {
    font-size: 0.9rem;
    opacity: 0.8;
    margin: 0.25rem 0 0;
  }

  .controls {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .play-button {
    background: none;
    border: none;
    color: white;
    cursor: pointer;
    padding: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
  }

  .play-button:hover {
    color: var(--primary);
    transform: scale(1.1);
  }

  .play-button.playing {
    color: var(--primary);
  }

  @media (max-width: 768px) {
    .player-content {
      gap: 1rem;
    }

    .program-info h3 {
      font-size: 1rem;
    }

    .time {
      font-size: 0.8rem;
    }
  }
</style> 